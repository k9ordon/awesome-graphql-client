import { gql } from 'awesome-graphql-client'
import { GetStaticProps } from 'next'
import { useState } from 'react'
import { QueryClient } from 'react-query'
import { dehydrate, DehydratedState } from 'react-query/hydration'

import { useGraphQLQuery } from '../hooks/useGraphQLQuery'
// Types generated by running: npm run generate:types
import { GetCharacters, GetCharactersVariables } from '../lib/gql-queries'
import graphQLClient from '../lib/graphQLClient'

const GET_CHARACTERS = gql`
	query GetCharacters($name: String) {
		characters(filter: { name: $name }) {
			results {
				id
				name
			}
		}
	}
`

export default function Home() {
	const [filter, setFilter] = useState('')

	const { data, error } = useGraphQLQuery<GetCharacters, GetCharactersVariables>(
		GET_CHARACTERS,
		{ name: filter },
		{ staleTime: 60 * 1000, keepPreviousData: true },
	)

	return (
		<div>
			<label htmlFor="filter">Enter name: </label>
			<input
				value={filter}
				id="filter"
				name="filter"
				onChange={(event) => setFilter(event.target.value)}
			/>
			{data ? (
				<ul>
					{data.characters!.results!.map((character, i) => (
						<li key={character!.id || i}>{character!.name}</li>
					))}
				</ul>
			) : error ? (
				<div>Error: {error.message}</div>
			) : (
				<div>Loading...</div>
			)}
		</div>
	)
}

export const getStaticProps: GetStaticProps<{
	dehydratedState: DehydratedState
}> = async () => {
	const queryClient = new QueryClient()

	await queryClient.prefetchQuery([GET_CHARACTERS, { name: '' }], () =>
		graphQLClient.request(GET_CHARACTERS, { name: '' }),
	)

	return {
		props: { dehydratedState: dehydrate(queryClient) },
		revalidate: 6 * 60 * 60, // every 6 hours
	}
}
